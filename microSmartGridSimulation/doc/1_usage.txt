MisTiGriD documentation
Chapter I : Usage

This document indicates how to configure and run a MisTiGriD simulation.



I.1 MisTiGriD installation

MisTiGriD requries Java 7+ to be installed on your host machine. Being familiar with the Felix platform (cf. http://felix.apache.org) is a plus.

A MisTiGriD instance consists in a series of OSGi bundles running on a Felix platform. The root of the instance contains 5 folders:
  - /bin contains the Felix executable jar.
  - /bundles contains all bundles and libraries that compose MisTiGriD (detailed below).
  - /conf contains text configurations (details below).
  - /felix-cache is automatically generated by Felix, this folder may be deleted between two executions to force Felix to reinstall all bundles.
  - /log contains all traces (CSV files) generated by MisTiGriD during execution.
  
  

I.2 Running MisTiGriD

MisTiGriD must be started as a normal Felix platform: from the root folder, run "java -jar bin/felix.jar". If everything runs fine, a web interface will be available at:

http://localhost:8080/webgui/main.html

The web interface proposes its own manual:

http://localhost:8080/webgui/manpage.html

The Felix WebConsole is also available at:

http://localhost:8080/system/console (login/password: admin/admin)

Ctrl-C terminates the simulation. By convention, all traces printed in the console by MisTiGriD start with a "#". Everything else comes from third-party libraries.

The port number (8080 here) can be changed by editing the "org.osgi.service.http.port" property in the /conf/config.properties file.



I.3 Configuring MisTiGriD

MisTiGriD can be configured in two places:
  - by editing configuration text files: /conf/config.properties and /conf/akka.conf.
  - by changing configuration bundles in the /bundles/hot folder.
  
/bundles/hot is a "hot" folder: any bundle put in this folder will be automatically installed and started by Felix (cf. Felix File Install module). This folder contains a WebGUI bundle and configuration bundles that deploy simulated components (rooms, appliances, etc.) on the running platform. At the moment, available configuration bundles are the following:
  
  - misTiGriD_configs_mouchez-1.1.jar : deploys a simple house.
  - misTiGriD_configs_district-1.1.jar : deploys a district aggregator, used for multi-house simulation.
  
By default, MisTiGriD is configured for a single-house simulation with a "mouchez" bundle. In case one wants to run multiple houses in the same district, a MisTiGriD instance must be run for each house, and one for the district aggregator. In addition, some configuration changes are necessary to tell the houses where to find the aggregator.


I.3.1 Sample single house configuration

A single instance of MisTiGriD is necessary (default distribution is configured as such):

  - /bundles/hot contains misTiGriD_configs_mouchez-1.1.jar
  - /conf/akka.conf contains lines:
  
      ...
      hostname = "localhost"
      port = 4000
      ...
  
  - /conf/config.properties contains lines:
  
      ...
      MisTiGriD.hasRemoteParent=false
      MisTiGriD.remoteParentURL="whatever_this_will_not_be_used"
      MisTiGriD.districtLoadManagerURI="whatever_this_will_not_be_used"
      ...
      
  which signifies the house runs alone and should not look for a district aggregator.
  
  
I.3.2 Sample multi-house configuration

On a host with IP IP_DISTRICT (for instance, 192.168.1.10) the district instance is configured as follows:

  - /bundles/hot contains misTiGriD_configs_district-1.1.jar
  - /conf/akka.conf contains lines:

      ...
      hostname = "IP_DISTRICT"
      port = 4000
      ...
      
  which tells MisTiGriD to deploy an aggregator service listening for incoming houses on port 4000 (or any suitable port value) of this host.

  - /conf/config.properties contains lines:

      ...
      MisTiGriD.hasRemoteParent=false
      MisTiGriD.remoteParentURL="whatever_this_will_not_be_used"
      MisTiGriD.districtLoadManagerURI="whatever_this_will_not_be_used"
      ...
  
  which signifies the aggregator should not look for a superior aggregator.
  
      
On a host with IP IP_HOUSE_1 (for instance, 192.168.1.11) a house instance is configured as follows:
      
  - /bundles/hot contains misTiGriD_configs_mouchez-1.1.jar
  - /conf/akka.conf contains lines:
      
      ...
      hostname = "IP_HOUSE_1"
      port = 4001
      ...
      
  - /conf/config.properties contains lines:
      
      ...
      MisTiGriD.hasRemoteParent=true
      MisTiGriD.remoteParentURL=akka://MisTiGriD@IP_DISTRICT:4000/user/districtAggregator
      MisTiGriD.districtLoadManagerURI="akka://MisTiGriD@IP_DISTRICT:4000/user/districtLoadManager"
      ...
      
  which tells the house simulation to go fetch an aggregator on host IP_DISTRICT with port 4000. Make sure the port matches the port used by the district instance.
  
Start the district instance first, and wait for it to run and listen for incoming houses (for instance, check that the web interface is available). Then start all house instances one after each other: you should see in the house traces the connection steps with the district instance, and corresponding traces in the district instance console.

MisTiGriD still being messy with remoting, stopping or crashing any of the instances is likely to crash the other ones, in which case you must stop them all and start over again.